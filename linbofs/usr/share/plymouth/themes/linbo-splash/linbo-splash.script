# linbo-splash.script for plymouth
# thomas@linuxmuster.net
# 20210206
#
# set font
font = "sans-serif 11";

# set the background color
Window.SetBackgroundTopColor (0.17, 0.27, 0.34);     # Nice colour on top of the screen fading to
Window.SetBackgroundBottomColor (0.17, 0.27, 0.34);  # an equally nice colour on the bottom

logo.image = Image("logo_no_arrows.png");
logo.sprite = Sprite(logo.image);
logo.sprite.SetOpacity (0.0);
logo_x = Window.GetWidth () / 2 - logo.image.GetWidth() / 2;
logo_y = Window.GetHeight () / 2 - logo.image.GetHeight() / 1.33;
logo.sprite.SetX(logo_x);
logo.sprite.SetY(logo_y);
logo.sprite.SetZ(10);
logo.sprite.SetOpacity(1.0);

circle[0].image = Image("arrows-1.png");
circle[0].sprite = Sprite(circle[0].image);
circle[0].sprite.SetOpacity (0.0);
circle_x = Window.GetWidth () / 2 - circle[0].image.GetWidth() / 2;
circle_y = logo_y;

for (i = 1; i < 18; i++){
	circle[i].image = Image("arrows-" + (i + 1) + ".png");
	circle[i].sprite = Sprite(circle[i].image);
	circle[i].sprite.SetOpacity (0.0);
}

x = 1;
lasti = 0;
loop = 0;

fun refresh ()  {
	if (Math.Int (x/2) < 18) i = (Math.Int (x / 2)) % 18;
	else{
		i = (Math.Int (x / 2) - 1) % 18;
		zoom = i;
	}
	circle[i].sprite.SetX(circle_x);
	circle[i].sprite.SetY(circle_y);
	circle[i].sprite.SetZ(10);
	circle[lasti].sprite.SetOpacity(0.0);
	circle[i].sprite.SetOpacity(1.0);
	lasti = i;
	x++;
}

Plymouth.SetRefreshFunction (refresh);

#----------------------------------------- Quit --------------------------------

fun quit_callback ()
{
}

Plymouth.SetQuitFunction(quit_callback);

#----------------------------------------- Linbo-Version --------------------------------

version_sprite = Sprite();
version_sprite.SetPosition(10, 10, 10000);

fun message_callback (text)
{
	version_image = Image.Text(text, 1.0, 1.0, 1.0, font);
	version_sprite.SetImage(version_image);
	version_y = logo_y + logo.image.GetHeight() + version_image.GetHeight() / 4 ;
	version_sprite.SetX(Window.GetWidth () / 2 - version_image.GetWidth() / 2);
	version_sprite.SetY(version_y);
	version.sprite.SetZ(11);
}

Plymouth.SetMessageFunction(message_callback);

#----------------------------------------- Scrolling Boot Messages --------------------------------

NUM_SCROLL_LINES=3;
LINE_WIDTH=55;

// Initialising text images and their positions
// 20 is the height (including line spacing) of each line
for (i=0; i < NUM_SCROLL_LINES; i++) {
  lines[i]= Image.Text("", 1.0, 1.0, 1.0, status_font);
	message_y = logo_y + logo.image.GetHeight() + 50;
  message_sprite[i] = Sprite();
	message_sprite[i].SetPosition(Window.GetWidth () * 0.2, (Window.GetHeight () * 0.6) + (i * 20), 10000);
	message_sprite[i].SetX(logo_x);
	message_sprite[i].SetY(message_y + (i* 20));
	message_sprite[i].SetZ(20);
}

// From ubuntu-logo
fun StringLength(string) {

  index = 0;
  str = String(string);
  while(str.CharAt(index)) index++;
  return index;
}

fun scroll_message_callback(text) {

   // Truncate the message if too long
   if (StringLength(text) > LINE_WIDTH) {
     text = text.SubString(0, LINE_WIDTH - 3);
     text += "...";
   }

   // Shift message one up
   for (i = 0; i < NUM_SCROLL_LINES - 1; i++) {
     lines[i] = lines[i+1];
   }

   // Create the image for the latest message
   lines[i] = Image.Text(text, 1.0, 1.0, 1.0);

   // Re-positioning the text images
   for (i = 0; i < NUM_SCROLL_LINES; i++) {
     message_sprite[i].SetImage(lines[i]);
   }
}

Plymouth.SetUpdateStatusFunction(scroll_message_callback);
