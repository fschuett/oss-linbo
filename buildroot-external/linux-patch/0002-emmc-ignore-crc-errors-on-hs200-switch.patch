diff -up linux-headers-4.8.11/drivers/mmc/core/mmc.c.orig linux-headers-4.8.11/drivers/mmc/core/mmc.c
--- linux-headers-4.8.11/drivers/mmc/core/mmc.c.orig	2017-02-15 23:28:13.730428039 +0100
+++ linux-headers-4.8.11/drivers/mmc/core/mmc.c	2017-02-15 23:41:26.198879143 +0100
@@ -1004,18 +1004,25 @@ static int mmc_select_bus_width(struct m
 }
 
 /* Caller must hold re-tuning */
-static int mmc_switch_status(struct mmc_card *card)
+static int __mmc_switch_status(struct mmc_card *card, bool crc_err_fatal)
 {
 	u32 status;
 	int err;
 
 	err = mmc_send_status(card, &status);
+	if (!crc_err_fatal && err == -EILSEQ)
+		return 0;
 	if (err)
 		return err;
 
 	return mmc_switch_status_error(card->host, status);
 }
 
+static int mmc_switch_status(struct mmc_card *card)
+{
+	return __mmc_switch_status(card, true);
+}
+
 /*
  * Switch to the high-speed mode
  */
@@ -1237,7 +1244,12 @@ int mmc_hs400_to_hs200(struct mmc_card *
 
 	mmc_set_timing(host, MMC_TIMING_MMC_HS200);
 
-	err = mmc_switch_status(card);
+	/*
+	 * For HS200, CRC errors are not a reliable way to know the switch
+	 * failed. If there really is a problem, we would expect tuning will
+	 * fail and the result ends up the same.
+	 */
+	err = __mmc_switch_status(card, false);
 	if (err)
 		goto out_err;
 
@@ -1394,7 +1406,12 @@ static int mmc_select_hs200(struct mmc_c
 		old_timing = host->ios.timing;
 		mmc_set_timing(host, MMC_TIMING_MMC_HS200);
 
-		err = mmc_switch_status(card);
+		/*
+		 * For HS200, CRC errors are not a reliable way to know the
+		 * switch failed. If there really is a problem, we would expect
+		 * tuning will fail and the result ends up the same.
+		 */
+		err = __mmc_switch_status(card, false);
 		/*
 		 * mmc_select_timing() assumes timing has not changed if
 		 * it is a switch error.
